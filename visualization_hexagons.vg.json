{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 300,
  "background": "black",
  "signals": [
    {
      "name": "current_step",
      "value": -1,
      "bind": {"input": "range", "min": -1, "max": 1690, "step": 1}
    },
    {"name": "rows", "init": "y_extent[1]+1"},
    {"name": "columns", "init": "x_extent[1]+1"},
    {
      "name": "scale",
      "init": "round(100*max(1,width/height))/100",
      "bind": {"input": "range", "min": 0, "max": 2},
      "on": [
        {
          "events": "view:mousewheel",
          "update": "round(max(0, min(2, scale + (event.wheelDelta > 0 ? 0.1 : -0.1)))*100)/100"
        }
      ]
    },
    {"name": "hexalength", "update": "sin(PI)"},
    {"name": "sizeref", "init": "min(width,height)"},
    {"name": "sizeSymbol", "update": "bandwidth('hscale')"},
    {"name": "hcl_white", "init": "hcl('white')"},
    {
      "name": "visualization",
      "value": "umatrix",
      "bind": {"input": "select", "options": ["iso", "umatrix", "classes"]}
    },
    {"name": "showClasses", "update": "visualization === 'classes'"},
    {"name": "showIso", "update": "visualization === 'iso'"},
    {"name": "hivewidth", "update": "sizeSymbol*columns"}
  ],
  "data": [
    {
      "name": "neurons",
      "format": {
        "type": "dsv",
        "delimiter": ";",
        "parse": {
          "x": "number",
          "y": "number",
          "z": "number",
          "step": "number",
          "score": "number",
          "secondary": "number",
          "class": "number",
          "stabilized": "number",
          "score1": "number",
          "score2": "number"
        },
        "header": [
          "vector",
          "x",
          "y",
          "z",
          "step",
          "score",
          "class",
          "secondary",
          "stabilized",
          "score1",
          "score2",
          "entries"
        ]
      },
      "url": "https://raw.githubusercontent.com/mtiberghien/DNF1ED01-SOM/master/som2D.data?token=ASL2ZNOLITE24TLC6B5LJ5TAKG36G",
      "transform": [
        {"type": "extent", "signal": "steps", "field": "step"},
        {"type": "filter", "expr": "datum.step === current_step"},
        {"type": "extent", "field": "y", "signal": "y_extent"},
        {"type": "extent", "field": "x", "signal": "x_extent"},
        {"type": "extent", "field": "score", "signal": "scores"},
        {
          "type": "formula",
          "expr": "split(replace(replace(datum.vector, '[',''),']',''),',')",
          "as": "vector"
        },
        {
          "type": "formula",
          "expr": "[toNumber(datum.vector[0]),toNumber(datum.vector[1]),toNumber(datum.vector[2]),toNumber(datum.vector[3])]",
          "as": "vector"
        },
        {"type": "formula", "expr": "datum.x+'.'+datum.y", "as": "id"}
      ]
    },
    {
      "name": "umatrix",
      "source": "neurons",
      "transform": [
        {"type": "project", "fields": ["x", "y", "vector"]},
        {
          "type": "formula",
          "expr": "sequence(datum.x-1,datum.x+2,1)",
          "as": "nx"
        },
        {
          "type": "formula",
          "expr": "sequence(datum.y-1,datum.y+2,1)",
          "as": "ny"
        },
        {"type": "flatten", "fields": ["ny"]},
        {"type": "flatten", "fields": ["nx"]},
        {
          "type": "filter",
          "expr": "datum.nx >= 0 && datum.ny >=0 && datum.nx < columns && datum.ny < rows && (((datum.y%2 === 1 && datum.nx < (datum.x+1)) || (datum.y%2 === 0 && datum.nx > (datum.x-1))) || datum.ny === datum.y) && (datum.nx !== datum.x || datum.ny !== datum.y)"
        },
        {"type": "formula", "expr": "datum.nx+'.'+datum.ny", "as": "nid"},
        {
          "type": "lookup",
          "key": "id",
          "from": "neurons",
          "fields": ["nid"],
          "values": ["vector"],
          "as": ["nvector"]
        },
        {"type": "flatten", "fields": ["vector", "nvector"]},
        {
          "type": "formula",
          "expr": "pow(datum.vector - datum.nvector, 2)",
          "as": "d"
        },
        {
          "type": "aggregate",
          "fields": ["d"],
          "ops": ["sum"],
          "groupby": ["x", "y", "nx", "ny"],
          "as": ["d"]
        },
        {"type": "formula", "expr": "sqrt(datum.d)", "as": "d"},
        {
          "type": "aggregate",
          "fields": ["d"],
          "ops": ["mean"],
          "groupby": ["x", "y"],
          "as": ["d"]
        },
        {"type": "formula", "expr": "datum.x+'.'+datum.y", "as": "id"},
        {
          "type": "lookup",
          "from": "neurons",
          "key": "id",
          "fields": ["id"],
          "values": ["class", "secondary", "score", "score1", "score2"]
        }
      ]
    },
    {
      "name": "contours",
      "values": [
        {
          "width": 10,
          "height": 6,
          "values": [
            0.1880212199452168,
            0.24333470412316394,
            0.2886564716286609,
            0.2505858475773026,
            0.25910818517381845,
            0.35775356409451875,
            0.29970327250384304,
            0.3188422987165109,
            0.3905135682669356,
            0.5758821289243886,
            0.3192231957732337,
            0.3288627058653789,
            0.2855003207715698,
            0.26100900699783963,
            0.24224165193449101,
            0.33896149236392936,
            0.3018407324826444,
            0.2715610184231788,
            0.3501414940257599,
            0.30626448018043734,
            0.4288245126067427,
            0.276779004546938,
            0.3016620640630127,
            0.2843286384058817,
            0.29278371890267607,
            0.3703014551254017,
            0.31541384495936375,
            0.2855025823591412,
            0.2709447555123156,
            0.2584284129362279,
            0.26288754794808267,
            0.314273337403383,
            0.15572406683555778,
            0.21010551108632067,
            0.3362024318329401,
            0.34352274366020047,
            0.34826557037678485,
            0.2689051862483423,
            0.26576578684379665,
            0.30040505629232866,
            0.24484606568143977,
            0.24403448053516424,
            0.32089490324215486,
            0.2969853287163936,
            0.2775094708388013,
            0.2767377907113204,
            0.25914984410327085,
            0.2700272201722008,
            0.22315767800927339,
            0.2737032490560792,
            0.24000252284434975,
            0.33685308411429465,
            0.3367711780153249,
            0.389096858725259,
            0.33642056066276815,
            0.2793255055439181,
            0.29593875059062746,
            0.2853016660587634,
            0.20995514589393177,
            0.201882121287182
          ]
        }
      ],
      "transform": [
        {"type": "formula", "expr": "columns", "as": "width"},
        {"type": "formula", "expr": "rows", "as": "height"},
        {
          "type": "formula",
          "expr": "pluck(data('umatrix'),'d')",
          "as": "values"
        },
        {
          "type": "isocontour",
          "scale": {"expr": "hivewidth/datum.width"},
          "translate": [
            {"signal": "(width - hivewidth)/2"},
            {"signal": "(height - (hivewidth*rows/columns))/2"}
          ]
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "hscale",
      "type": "band",
      "domain": {"signal": "sequence(0,max(rows,columns)+1,1)"},
      "range": [0, {"signal": "sizeref*scale"}]
    },
    {
      "name": "light",
      "type": "pow",
      "exponent": 2,
      "domain": {"data": "umatrix", "field": "d"},
      "range": [1, 0]
    },
    {
      "name": "color",
      "type": "ordinal",
      "domain": {"data": "umatrix", "field": "class", "sort": true},
      "range": ["#555", "red", "yellow", "blue"]
    },
    {
      "name": "iso-color",
      "type": "linear",
      "domain": {"data": "umatrix", "field": "d"},
      "range": {"scheme": "blueorange"}
    }
  ],
  "marks": [
    {
      "type": "path",
      "from": {"data": "contours"},
      "encode": {
        "enter": {
          "stroke": {"value": "#ccc"},
          "strokeWidth": {"value": 1},
          "fill": {"scale": "iso-color", "field": "contour.value"}
        },
        "update": {"opacity": {"signal": "showIso ? 1 :0"}}
      },
      "transform": [{"type": "geopath", "field": "datum.contour"}]
    },
    {
      "type": "symbol",
      "from": {"data": "umatrix"},
      "encode": {
        "enter": {
          "shape": {"value": "m0,-1 l1,.5 v1 l-1,.5 l-1,-.5 v-1 l1,-.5"},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "size": {"signal": "pow(sizeSymbol,2)"},
          "opacity": {"signal": "showIso ? 0.2 : 1"},
          "xc": {
            "field": "x",
            "scale": "hscale",
            "offset": {
              "signal": "(datum.y%2==1 ? 0 : sizeSymbol/2) + (width - sizeSymbol*columns)/2 + sizeSymbol/4"
            }
          },
          "fill": [
            {
              "test": "showClasses",
              "signal": "datum.secondary > -1 ? datum.secondary : datum.class",
              "scale": "color"
            },
            {
              "signal": "hcl(hcl_white.h,hcl_white.c, scale('light', datum.d)*100)"
            }
          ],
          "yc": {
            "field": "y",
            "scale": "hscale",
            "offset": {
              "signal": "(datum.y > 0 ? -datum.y*sizeSymbol/4 : 0) +(height - (sizeSymbol*rows - (rows-1)*sizeSymbol/4))/2 + sizeSymbol/2"
            }
          }
        }
      }
    },
    {
      "type": "symbol",
      "from": {"data": "umatrix"},
      "encode": {
        "enter": {
          "shape": {"value": "m0,-1 l1,.5 v1 l-1,.5 l-1,-.5 v-1 l1,-.5"}
        },
        "update": {
          "opacity": {"signal": "showIso || !showClasses ? 0 :1"},
          "tooltip": {
            "signal": "{'class':datum.class,'score':datum.score,'score max':datum.score1, 'score 2':datum.score2,'coords':[datum.x,datum.y]}"
          },
          "size": {
            "signal": "pow(sizeSymbol * (datum.score1/(datum.score || 1)||1),2)"
          },
          "xc": {
            "field": "x",
            "scale": "hscale",
            "offset": {
              "signal": "(datum.y%2==1 ? 0 : sizeSymbol/2) + (width - sizeSymbol*columns)/2 + sizeSymbol/4"
            }
          },
          "fill": [
            {"test": "showClasses", "field": "class", "scale": "color"},
            {
              "signal": "hcl(hcl_white.h,hcl_white.c, scale('light', datum.d)*100)"
            }
          ],
          "yc": {
            "field": "y",
            "scale": "hscale",
            "offset": {
              "signal": "(datum.y > 0 ? -datum.y*sizeSymbol/4 : 0) +(height - (sizeSymbol*rows - (rows-1)*sizeSymbol/4))/2 + sizeSymbol/2"
            }
          }
        }
      }
    }
  ]
}